name: Test and Lint

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        pip install -r requirements.txt
    
    - name: Run Black
      run: black --check .
    
    - name: Run isort
      run: isort --check-only --diff .
    
    - name: Run Flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run MyPy
      run: mypy . --ignore-missing-imports

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: anythingllm
          POSTGRES_PASSWORD: anythingllm
          POSTGRES_DB: anythingllm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov
    
    - name: Create .env file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-ci
        DEBUG=True
        DATABASE_URL=postgresql://anythingllm:anythingllm@localhost:5432/anythingllm_test
        REDIS_URL=redis://localhost:6379/0
        CELERY_BROKER_URL=redis://localhost:6379/0
        CELERY_RESULT_BACKEND=redis://localhost:6379/0
        EOF
    
    - name: Run migrations
      run: |
        python manage.py migrate
    
    - name: Run tests with coverage
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run Safety check
      run: safety check --json
      continue-on-error: true
    
    - name: Run Bandit security scan
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: anythingllm:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm anythingllm:test python manage.py check

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: anythingllm
          POSTGRES_PASSWORD: anythingllm
          POSTGRES_DB: anythingllm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create .env file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-ci
        DEBUG=False
        DATABASE_URL=postgresql://anythingllm:anythingllm@localhost:5432/anythingllm_test
        REDIS_URL=redis://localhost:6379/0
        CELERY_BROKER_URL=redis://localhost:6379/0
        CELERY_RESULT_BACKEND=redis://localhost:6379/0
        EOF
    
    - name: Run migrations
      run: |
        python manage.py migrate
    
    - name: Collect static files
      run: |
        python manage.py collectstatic --noinput
    
    - name: Run Django checks
      run: |
        python manage.py check --deploy
    
    - name: Test API endpoints
      run: |
        # Start server in background
        python manage.py runserver &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Test health endpoint
        curl -f http://localhost:8000/ping/ || exit 1
        
        # Test API schema endpoint
        curl -f http://localhost:8000/api/schema/ || exit 1
        
        # Kill server
        kill $SERVER_PID